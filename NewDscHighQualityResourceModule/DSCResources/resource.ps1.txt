<#
.SYNOPSIS
    Gets <%=$PLASTER_PARAM_TargetResourceName%> resource current state.
<%
    if ($PLASTER_PARAM_Ensure -eq 'Yes') {
        ".PARAMETER Ensure"
        "    Ensure the resource is either Present or Absent."
    }
    if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
        ".PARAMETER IsSingleInstance"
        "    Specifies the resource is a single instance, the value must be 'Yes'."
    }
%>
#>
function Get-TargetResource {
    [OutputType([Hashtable])]
    param (
<%
        if ($PLASTER_PARAM_Ensure -eq 'Yes') {
            "        [Parameter(Mandatory = `$true)]"
            "        [ValidateSet('Present', 'Absent')]"
            if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
                "        [string]"
                "        `$Ensure,"
                ""
            }
            else {
                "        [string]"
                "        `$Ensure"
            }
        }

        if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
            "        [Parameter(Mandatory = `$true)]"
            "        [ValidateSet('Yes')]"
            "        [string]"
            "        `$IsSingleInstance"
        }
%>
    )

    # Return a hashtable of name/value pairs representing the target resource instance.
    @{
<%
        if ($PLASTER_PARAM_Ensure -eq 'Yes') {
            "        Ensure = `$Ensure"
        }
        if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
            "        IsSingleInstance = 'Yes'"
        }
%>
    }
}

<#
.SYNOPSIS
    Configures <%=$PLASTER_PARAM_TargetResourceName%> resource state.
<%
    if ($PLASTER_PARAM_Ensure -eq 'Yes') {
        ".PARAMETER Ensure"
        "    Ensure the resource is either Present or Absent."
    }
    if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
        ".PARAMETER IsSingleInstance"
        "    Specifies the resource is a single instance, the value must be 'Yes'."
    }
%>
#>
function Set-TargetResource {
    [CmdletBinding()]
    param (
<%
        if ($PLASTER_PARAM_Ensure -eq 'Yes') {
            "        [Parameter(Mandatory = `$true)]"
            "        [ValidateSet('Present', 'Absent')]"
            if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
                "        [string]"
                "        `$Ensure,"
                ""
            }
            else {
                "        [string]"
                "        `$Ensure"
            }
        }

        if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
            "        [Parameter(Mandatory = `$true)]"
            "        [ValidateSet('Yes')]"
            "        [string]"
            "        `$IsSingleInstance"
        }
%>
    )

<%

    if ($PLASTER_PARAM_RebootRequired -eq 'Yes') {
        "    # Signals LCM that a reboot is required"
        "    `$global:DSCMachineStatus = `$true"
    }
%>

}

<#
.SYNOPSIS
    Tests if <%=$PLASTER_PARAM_TargetResourceName%> resource state is in the desired state or not.
<%
    if ($PLASTER_PARAM_Ensure -eq 'Yes') {
        ".PARAMETER Ensure"
        "    Ensure the resource is either Present or Absent."
    }
    if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
        ".PARAMETER IsSingleInstance"
        "    Specifies the resource is a single instance, the value must be 'Yes'."
    }
%>
#>
function Test-TargetResource {
    [CmdletBinding()]
    [OutputType([System.Boolean])]
    param (
<%
        if ($PLASTER_PARAM_Ensure -eq 'Yes') {
            "        [Parameter(Mandatory = `$true)]"
            "        [ValidateSet('Present', 'Absent')]"
            if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
                "        [string]"
                "        `$Ensure,"
                ""
            }
            else {
                "        [string]"
                "        `$Ensure"
            }
        }

        if ($PLASTER_PARAM_IsSingleInstance -eq 'Yes') {
            "        [Parameter(Mandatory = `$true)]"
            "        [ValidateSet('Yes')]"
            "        [string]"
            "        `$IsSingleInstance"
        }
%>
    )

    [bool]$result = $false

    # Test the status of the target resource instance.  Return either $true or $false.

    $result
}

Export-ModuleMember -Function Get-TargetResource, Set-TargetResource, Test-TargetResource